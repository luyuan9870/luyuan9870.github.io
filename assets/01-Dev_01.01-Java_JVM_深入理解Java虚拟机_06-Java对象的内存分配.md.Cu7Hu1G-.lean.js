import{_ as t,c as o,o as r,m as a,a as e}from"./chunks/framework.BG61BEI0.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"01-Dev/01.01-Java/JVM/深入理解Java虚拟机/06-Java对象的内存分配.md","filePath":"01-Dev/01.01-Java/JVM/深入理解Java虚拟机/06-Java对象的内存分配.md"}'),n={name:"01-Dev/01.01-Java/JVM/深入理解Java虚拟机/06-Java对象的内存分配.md"},s=a("p",null,[a("strong",null,"大对象直接老年代："),e(" 需要使用连续的大量内存空间的 Java 对象。 -XX：PretenureSizeThreshold ： 设置大于多少内存的对象，直接进入老年代 "),a("strong",null,"长期存活进入老年代："),e(" 基于对象，做了一个对象年龄计数器。 "),a("strong",null,"动态判定对象年龄："),e(" Survivor（幸存的）JVM 针对这个区域，做了特殊的优化，所有的相同年龄的对象大于这个空间的一半，则会直接进入老年代。 "),a("strong",null,"提前触发垃圾回收："),e(" “大对象对虚拟机来说是一个不折不扣的坏消息，比遇到一个大对象更坏的消息是遇到了一个短命的大对象。” "),a("strong",null,"TALB："),e(" Thread All Location Buffer")],-1),l=[s];function _(c,v,d,J,i,u){return r(),o("div",null,l)}const m=t(n,[["render",_]]);export{f as __pageData,m as default};
