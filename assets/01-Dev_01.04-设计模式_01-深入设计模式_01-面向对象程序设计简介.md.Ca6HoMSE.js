import{_ as t,c as e,o,a4 as a}from"./chunks/framework.BG61BEI0.js";const r="/assets/20231129104818.DNovGZn_.png",s="/assets/20231129105109.DiCZqfvW.png",f=JSON.parse('{"title":"面向对象程序设计基础","description":"","frontmatter":{},"headers":[],"relativePath":"01-Dev/01.04-设计模式/01-深入设计模式/01-面向对象程序设计简介.md","filePath":"01-Dev/01.04-设计模式/01-深入设计模式/01-面向对象程序设计简介.md"}'),n={name:"01-Dev/01.04-设计模式/01-深入设计模式/01-面向对象程序设计简介.md"},_=a('<p><strong>面向对象程序设计</strong>（Object-Oriented Programming，缩写为 OOP）是一种范式，其基本理念是将数据块及与数据相关的行为封装成为特殊的、名为<strong>对象</strong>的实体，同时对象实体的生成工作则是基于程序员给出的一系列“蓝图”，这些“蓝图”就是<strong>类</strong>。</p><h1 id="面向对象程序设计基础" tabindex="-1">面向对象程序设计基础 <a class="header-anchor" href="#面向对象程序设计基础" aria-label="Permalink to &quot;面向对象程序设计基础&quot;">​</a></h1><h2 id="对象和类" tabindex="-1">对象和类 <a class="header-anchor" href="#对象和类" aria-label="Permalink to &quot;对象和类&quot;">​</a></h2><p>你喜欢猫吗？希望你喜欢，因为我将用和猫有关的各种示例来解释面向对象程序设计的概念。</p><p><img src="'+r+'" alt="" loading="lazy"></p><blockquote><p>这是一个 UML 类图。你将在本书中看到许多类似的图示。</p></blockquote><p>假如你有一只名为卡卡的猫。卡卡是一个对象，也是猫 Cat 这个类的一个实例。每只猫都有许多基本属性： 名字 name 、性别 sex 、年龄 age 、体重 weight 、毛色 color 和最爱的食物等。这些都是该类的成员变量。 所有猫都有相似的行为： 它们会呼吸 breathe 、进食 eat 、奔跑 run 、睡觉 sleep 和喵喵叫 meow 。这些都是该类的方法。成员变量和方法可以统称为类的成员。存储在对象成员变量中的数据通常被称为状态，对象中的所有方法则定义了其行为。 <img src="'+s+'" alt="" loading="lazy"><strong>对象是类的实例</strong></p><blockquote><p>你朋友的猫“露露”也是 <code>猫</code> 这个类的一个实例。它拥有与“卡卡”相同的一组属性。不同之处在于这些属性的值：她的性别是“女孩”；她的毛色不同；体重较轻。因此<strong>类</strong>就像是定义<strong>对象</strong>结构的蓝图，而<strong>对象</strong>则是类的具体实例。</p></blockquote>',8),c=[_];function i(l,p,g,d,m,h){return o(),e("div",null,c)}const b=t(n,[["render",i]]);export{f as __pageData,b as default};
