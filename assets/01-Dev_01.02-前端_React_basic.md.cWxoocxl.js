import{_ as n,E as o,c as l,m as a,a as s,J as i,a4 as t,o as p}from"./chunks/framework.BG61BEI0.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"01-Dev/01.02-前端/React/basic.md","filePath":"01-Dev/01.02-前端/React/basic.md"}'),c={name:"01-Dev/01.02-前端/React/basic.md"},r=t(`<p>声明式设计 虚拟 Dom 减少与真实 Dom 的交互 灵活具有丰富的 React 组件库 单项数据流，不像 Vue 的双向绑定。</p><h2 id="jsx-语法" tabindex="-1">JSX 语法 <a class="header-anchor" href="#jsx-语法" aria-label="Permalink to &quot;JSX 语法&quot;">​</a></h2><blockquote><p>本质上就是在 JS 的基础上添加了 html 的标签结构。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div><h2 id="hooks" tabindex="-1">Hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;Hooks&quot;">​</a></h2><h2 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import {Link,BrowserRouter,Route} from &#39;react-router-dom&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;Switch&gt;// 外层套 Switch组件 防止穿透效果</span></span>
<span class="line"><span>	&lt;BrowserRouter&gt; // 浏览器路由模式</span></span>
<span class="line"><span>		&lt;Link to= &quot;组件地址&quot; /&gt; // &lt;Link to=&quot;/uri&quot;&gt;组件名称&lt;/Link&gt;</span></span>
<span class="line"><span>		&lt;NavLink &gt; // 同Link,多了一个ActiveClassName  选中时的样式</span></span>
<span class="line"><span>		&lt;Route path = &quot;路由地址&quot; component={组件名称}/&gt;  </span></span>
<span class="line"><span>	&lt;/BrowserRouter&gt;</span></span>
<span class="line"><span>&lt;/Switch&gt;</span></span></code></pre></div><p>路由组件与普通组件的差异</p>`,8),u=a("li",null,[s("路由组件: "),a("code",null,"<Route component = {Demo}/>")],-1),d=a("li",null,[s("存放位置 "),a("ul",null,[a("li",null,"普通组件 : components"),a("li",null,"路由组件: pages")])],-1),h=a("li",null,[s("Props 内容 "),a("ul",null,[a("li",null,"普通组件: 传什么有什么"),a("li",null,"路由组件: 固定属性.")])],-1),_=t(`<blockquote><p>针对普通组件的 props 中没有路由组件属性的解决方案: <code>withRouter</code></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>impl {withRouter} from react</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default withRouter(YourComponent)</span></span></code></pre></div><p><strong>路由传递的 Props</strong></p><ul><li><strong>history：</strong></li><li><strong>location：</strong></li><li><strong>match：</strong></li></ul><h2 id="重定向-redirect" tabindex="-1">重定向 Redirect <a class="header-anchor" href="#重定向-redirect" aria-label="Permalink to &quot;重定向 Redirect&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;Redirect to = &quot;/path&quot; /&gt;</span></span></code></pre></div>`,6);function g(m,b,k,v,q,R){const e=o("Demo");return p(),l("div",null,[r,a("ul",null,[a("li",null,[s("写法 "),a("ul",null,[a("li",null,[s("普通组件: "),i(e)]),u])]),d,h]),_])}const S=n(c,[["render",g]]);export{C as __pageData,S as default};
