import{_ as i,c as s,o as t,a4 as a}from"./chunks/framework.BG61BEI0.js";const u=JSON.parse('{"title":"Github-Actions","description":"","frontmatter":{},"headers":[],"relativePath":"02-Person/06-博客搭建/github与gitee的同步方案.md","filePath":"02-Person/06-博客搭建/github与gitee的同步方案.md"}'),e={name:"02-Person/06-博客搭建/github与gitee的同步方案.md"},n=a(`<h1 id="github-actions" tabindex="-1">Github-Actions <a class="header-anchor" href="#github-actions" aria-label="Permalink to &quot;Github-Actions&quot;">​</a></h1><p>需求:</p><blockquote><p>现状: 笔记仓库 是在Gitee上, 博客page仓库也在Gitee上, 现在每次关于博客的文章更新, 都需要我自己手动的去 build 然后把dist 文件夹 copy到我博客的仓库下载区手动上传 然后! 需要我自己去Gitee上 手动点击 更新按钮重新部署GiteePage 这个让我感到非常的麻烦,不适合我这种 懒人 此时 了解到 Github Actions Github Actions 是一个持续集成工具, 允许你通过github的workflows, 触发一个事件,然后执行一系列操作,从而实现自动sync到Gitee (#持续集成).</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">时序图</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idea push gitee </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gitee 镜像同步github</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github镜像同步完成 触发 actions</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actions build 静态页面 生成 dist文件夹</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actions 将dist文件夹 同步到 gitee page 仓库</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actions 触发 gitee page 仓库更新</span></span></code></pre></div><h2 id="什么是actions" tabindex="-1">什么是Actions? <a class="header-anchor" href="#什么是actions" aria-label="Permalink to &quot;什么是Actions?&quot;">​</a></h2><p>举个栗子</p><p>持续集成是由很多操作组成的</p><blockquote><p>:通过Jenkins/云效 构建流水线,完成<code>Java</code> 服务的自动部署背后的流程是什么?</p><ol><li>通过git地址,拉取代码到本地.</li><li>Maven打包成Jar包</li><li>通过提前构建好的shell脚本来运行Jar包 (本质上还是 <code>java -jar xxx.jar</code>)</li></ol></blockquote><p>这里面的每一步操作, 在github中都被称之为actions.</p><p>官方文档:<a href="https://docs.github.com/en/actions/quickstart" target="_blank" rel="noreferrer">https://docs.github.com/en/actions/quickstart</a></p><p>同步方案： <a href="https://juejin.cn/post/7049317964281020446" target="_blank" rel="noreferrer">https://juejin.cn/post/7049317964281020446</a></p><p><a href="https://juejin.cn/post/6960126908180725773" target="_blank" rel="noreferrer">针不戳！GitHub Actions 入坑指南 - 掘金</a><a href="https://www.freecodecamp.org/chinese/news/automate-open-source-projects-with-github-actions/" target="_blank" rel="noreferrer">Fetching Title#w356</a></p>`,12),h=[n];function o(p,l,r,c,k,d){return t(),s("div",null,h)}const b=i(e,[["render",o]]);export{u as __pageData,b as default};
