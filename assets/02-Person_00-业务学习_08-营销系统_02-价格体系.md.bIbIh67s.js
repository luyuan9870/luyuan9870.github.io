import{_ as a,c as e,o,a4 as t}from"./chunks/framework.BG61BEI0.js";const P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"02-Person/00-业务学习/08-营销系统/02-价格体系.md","filePath":"02-Person/00-业务学习/08-营销系统/02-价格体系.md","lastUpdated":1714290891000}'),l={name:"02-Person/00-业务学习/08-营销系统/02-价格体系.md"},r=t('<h2 id="价格类别" tabindex="-1">价格类别 <a class="header-anchor" href="#价格类别" aria-label="Permalink to &quot;价格类别&quot;">​</a></h2><blockquote><p>Pro 会员折扣价格-&gt;限时限量价-&gt;注册价-&gt;访客价</p></blockquote><ul><li>普通价格</li><li>访客价格</li><li>注册价格</li><li>限时限量价格</li><li>Pro 会员折扣价格</li><li>实际支付价格</li></ul><h2 id="会员积分抵现金" tabindex="-1">会员积分抵现金 <a class="header-anchor" href="#会员积分抵现金" aria-label="Permalink to &quot;会员积分抵现金&quot;">​</a></h2><p>汇率转换导致的双方不一致问题</p><h2 id="pro-会员折扣" tabindex="-1">Pro 会员折扣 <a class="header-anchor" href="#pro-会员折扣" aria-label="Permalink to &quot;Pro 会员折扣&quot;">​</a></h2><blockquote><p>由于精度损失问题</p><ol><li>按照 SKU 直接优惠, 商品价格 * 折扣 （这样的计算累加起来的金额肯定不等于订单维度的金额）</li><li>按购物/订单维度来优惠, 以订单的总金额 * 折扣（一方面是为了减少精度损耗，另外一方面可以把精度损耗的值都均摊到一个 sku 上）</li></ol></blockquote><p>按照 SKU 直接优惠的方式, 需要进行精度处理再累加。这样会导致让平台或多或少的多优惠出去一点钱。 订单维度： 尽可能的减少单独计算 SKU 的精度损失所带来的价格问题 在设计上对技术、业务都比较好理解</p><h3 id="订单优惠分摊问题" tabindex="-1">订单优惠分摊问题 <a class="header-anchor" href="#订单优惠分摊问题" aria-label="Permalink to &quot;订单优惠分摊问题&quot;">​</a></h3>',9),i=[r];function s(n,_,c,d,h,p){return o(),e("div",null,i)}const m=a(l,[["render",s]]);export{P as __pageData,m as default};
