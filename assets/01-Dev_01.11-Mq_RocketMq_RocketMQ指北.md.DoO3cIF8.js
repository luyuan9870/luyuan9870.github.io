import{_ as e,c as o,o as r,a4 as i}from"./chunks/framework.BG61BEI0.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"01-Dev/01.11-Mq/RocketMq/RocketMQ指北.md","filePath":"01-Dev/01.11-Mq/RocketMq/RocketMQ指北.md"}'),t={name:"01-Dev/01.11-Mq/RocketMq/RocketMQ指北.md"},l=i('<h2 id="rocketmq-的优势" tabindex="-1">RocketMq 的优势 <a class="header-anchor" href="#rocketmq-的优势" aria-label="Permalink to &quot;RocketMq 的优势&quot;">​</a></h2><ul><li>单机吞吐量高</li><li>可用性高： 分布式架构，架构极简</li><li>消息可靠性高： 通过参数配置，可以实现消息的 0 丢失</li><li>功能完善</li><li>基于 Java 语言开发</li><li>稳定性高： 有阿里巴巴双十一业务场景的背书，官网号称金融级别的稳定性。</li></ul><h2 id="服务架构" tabindex="-1">服务架构 <a class="header-anchor" href="#服务架构" aria-label="Permalink to &quot;服务架构&quot;">​</a></h2><p>RocketMQ 的组成架构</p><ul><li><strong>NameServer（简单理解成网关）：</strong> topic 路由控制中心，接受 Broker 信息做路由。在集群模式下，每一个 NameServer 都会保存完整的 Broker 的节点信息</li><li><strong>Producer：</strong> 负责生产消息，发送到 Broket</li><li><strong>Consumer：</strong> 从 Broker 中通过 Topic 订阅消息，</li><li><strong>Broker（简单理解成业务项目，如 SpringBoot）：</strong> 负责接受生产者的消息，并且存储下来。同时也会记录消息消费者的元信息 （消费者组，消费者进度，Topic，Queue 等信息） <ul><li>Topic： 针对消息分类的组。</li><li>Queue ： 针对 Topic 的细粒度划分，存放消息的地址引用偏移量</li><li>CommitLog： 存放具体的完整消息内容</li><li>读取消息的实现逻辑： 先去 Queue 上拿到消息的偏移量, 在通过偏移量去 CommitLog 上拿完整消息</li><li>针对多个 Topic 信息, 全部写到物理磁盘中的一个 CommitLog 上，提升了 RocketMQ 在多 Topic 场景下的顺序写性能。</li></ul></li></ul><p><strong>运行流程</strong></p><ol><li>NameServer 启动</li><li>Broker 启动，并且定时上报自己的元数据信息给 NameServer ，此时 NameServer 就有了 Topic 和 Broker 的映射关系</li><li>Producer 启动并创建消息发送给 Broker。（实际上是通过 NameServer 绕了一圈，基于 NameServer 给的 Broker 信息去注册）</li><li>Consumer 启动，和 Producer 基本一致</li></ol><p>同步 CommitLog 文件，以 Broker 为单位，区分主从。</p><p>RocketMQ 支持消息过滤： 支持对消息打 Tag，消费者可以选择根据 tag 来进行接收指定的消息进行消费。</p><p>RocketMQ 支持事务： 执行一些自定逻辑和 MQ 的发送绑定成原子性。</p><p>RocketMQ 支持延迟消息：</p><p>RocketMQ 支持私信队列：</p><p>RocketMQ 支持消息回溯： 可以调整偏移量、时间等操作</p><p>消息分发：</p><ul><li>集群消费模式：只会消费一次</li><li>广播消费模式： 有多少消费者，就会被消费多少次。</li></ul>',15),a=[l];function c(p,n,s,k,m,_){return r(),o("div",null,a)}const M=e(t,[["render",c]]);export{d as __pageData,M as default};
