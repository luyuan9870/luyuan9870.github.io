import{_ as a,c as t,o,m as e,a as n}from"./chunks/framework.BG61BEI0.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"01-Dev/01.01-Java/JUC/信号量.md","filePath":"01-Dev/01.01-Java/JUC/信号量.md","lastUpdated":1712823825000}'),l={name:"01-Dev/01.01-Java/JUC/信号量.md"},s=e("h2",{id:"semaphore",tabindex:"-1"},[n("Semaphore "),e("a",{class:"header-anchor",href:"#semaphore","aria-label":'Permalink to "Semaphore"'},"​")],-1),r=e("blockquote",null,[e("p",null,"计数信号量 是控制多线程情况下共享资源的计数器, 本质上和 countDownLatch 一样, 是一个多线程共享锁")],-1),c=e("p",null,"基于 AQS 实现",-1),_=e("ul",null,[e("li",null,"实现本质还是通过操作 AQS 的 state 实现多线程的通信交互"),e("li",null,"相比CountDownLatch的实现，Semaphore可以对state进行数量的增加、减少的单个或多个操作"),e("li",null,"获取共享变量的实现，即获取锁的实现提供了公平锁、非公平锁的实现，选择性更多"),e("li",null,"释放锁即变更共享变量递增的实现，通过自旋锁和CAS配合完成，这与其他JUC并发工具如CountDownLatch类似")],-1),i=[s,r,c,_];function d(h,p,u,m,f,v){return o(),t("div",null,i)}const D=a(l,[["render",d]]);export{C as __pageData,D as default};
