import{_ as a,c as s,o as e,a4 as n}from"./chunks/framework.rIDq68an.js";const b=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"01-Dev/01.03-网络安全/02-常见安全问题.md","filePath":"01-Dev/01.03-网络安全/02-常见安全问题.md"}'),p={name:"01-Dev/01.03-网络安全/02-常见安全问题.md"},t=n(`<p>本文转载自：<a href="https://www.cnblogs.com/fundebug/p/details-about-6-web-security.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/fundebug/p/details-about-6-web-security.html</a></p><h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>在互联网时代，数据安全与个人隐私受到了前所未有的挑战，各种新奇的攻击技术层出不穷。如何才能更好地保护我们的数据？本文主要侧重于分析几种常见的攻击的类型以及防御的方法。</p><h1 id="一、xss-跨站脚本攻击" tabindex="-1">一、XSS-跨站脚本攻击 <a class="header-anchor" href="#一、xss-跨站脚本攻击" aria-label="Permalink to &quot;一、XSS-跨站脚本攻击&quot;">​</a></h1><p>XSS (Cross-Site Scripting)，<strong>跨站脚本攻击</strong>，因为缩写和 CSS重叠，所以只能叫 XSS。</p><p>跨站脚本攻击是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种攻击。</p><p><strong>跨站脚本攻击有可能造成以下影响:</strong></p><ul><li>利用虚假输入表单骗取用户个人信息。</li><li>利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li><li>显示伪造的文章或图片。</li></ul><p>XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p><p><strong>XSS 的攻击方式千变万化，但还是可以大致细分为几种类型。</strong></p><h2 id="_1-非持久型-xss-反射型-xss" tabindex="-1">1.非持久型 XSS（反射型 XSS ） <a class="header-anchor" href="#_1-非持久型-xss-反射型-xss" aria-label="Permalink to &quot;1.非持久型 XSS（反射型 XSS ）&quot;">​</a></h2><p>非持久型 XSS 漏洞，一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692640-6722cc75-f145-416f-ac21-680f622d4a44.png" alt="" loading="lazy"></p><p>举一个例子，比如页面中包含有以下代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;select&gt;</span></span>
<span class="line"><span>    &lt;script&gt;</span></span>
<span class="line"><span>        document.write(&#39;&#39;</span></span>
<span class="line"><span>            + &#39;&lt;option value=1&gt;&#39;</span></span>
<span class="line"><span>            +     location.href.substring(location.href.indexOf(&#39;default=&#39;) + 8)</span></span>
<span class="line"><span>            + &#39;&lt;/option&gt;&#39;</span></span>
<span class="line"><span>        );</span></span>
<span class="line"><span>        document.write(&#39;&lt;option value=2&gt;English&lt;/option&gt;&#39;);</span></span>
<span class="line"><span>    &lt;/script&gt;</span></span>
<span class="line"><span>&lt;/select&gt;</span></span></code></pre></div><p>攻击者可以直接通过 URL (类似：<a href="https://xxx.com/xxx?default=%3Cscript%3Ealert(document.cookie)%3C/script%3E" target="_blank" rel="noreferrer">https://xxx.com/xxx?default=</a>) 注入可执行的脚本代码。不过一些浏览器如Chrome其内置了一些XSS过滤器，可以防止大部分反射型XSS攻击。</p><p><strong>非持久型 XSS 漏洞攻击有以下几点特征：</strong></p><ul><li>即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据。</li><li>攻击者需要诱骗点击,必须要通过用户点击链接才能发起</li><li>反馈率低，所以较难发现和响应修复</li><li>盗取用户敏感保密信息</li></ul><p><strong>为了防止出现非持久型 XSS 漏洞，需要确保这么几件事情：</strong></p><ul><li>Web 页面渲染的所有内容或者渲染的数据都必须来自于服务端。</li><li>尽量不要从 URL，document.referrer，document.forms 等这种 DOM API 中获取数据直接渲染。</li><li>尽量不要使用 eval, new Function()，document.write()，document.writeln()，window.setInterval()，window.setTimeout()，innerHTML，document.createElement() 等可执行字符串的方法。</li><li>如果做不到以上几点，也必须对涉及 DOM 渲染的方法传入的字符串参数做 escape 转义。</li><li>前端渲染的时候对任何的字段都需要做 escape 转义编码。</li></ul><h2 id="_2-持久型-xss-存储型-xss" tabindex="-1">2.持久型 XSS（存储型 XSS） <a class="header-anchor" href="#_2-持久型-xss-存储型-xss" aria-label="Permalink to &quot;2.持久型 XSS（存储型 XSS）&quot;">​</a></h2><p>持久型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如文章留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入<strong>数据库持久保存</strong>，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692622-6381bf6d-c50d-45e6-9397-2a39eaac3582.png" alt="" loading="lazy"></p><p>举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692623-50ba07b3-5020-49ec-b0ff-55045a034d7c.png" alt="" loading="lazy"></p><p>主要注入页面方式和非持久型 XSS 漏洞类似，只不过持久型的不是来源于 URL，referer，forms 等，而是来源于后端从数据库中读出来的数据 。持久型 XSS 攻击不需要诱骗点击，黑客只需要在提交表单的地方完成注入即可，但是这种 XSS 攻击的成本相对还是很高。</p><p><strong>攻击成功需要同时满足以下几个条件：</strong></p><ul><li>POST 请求提交表单后端没做转义直接入库。</li><li>后端从数据库中取出数据没做转义直接输出给前端。</li><li>前端拿到后端数据没做转义直接渲染成 DOM。</li></ul><p><strong>持久型 XSS 有以下几个特点：</strong></p><ul><li>持久性，植入在数据库中</li><li>盗取用户敏感私密信息</li><li>危害面广</li></ul><h2 id="_3-如何防御" tabindex="-1">3.如何防御 <a class="header-anchor" href="#_3-如何防御" aria-label="Permalink to &quot;3.如何防御&quot;">​</a></h2><p><strong>对于 XSS 攻击来说，通常有两种方式可以用来防御。</strong></p><h3 id="_1-csp" tabindex="-1">1) CSP <a class="header-anchor" href="#_1-csp" aria-label="Permalink to &quot;1) CSP&quot;">​</a></h3><p><strong>CSP</strong> 本质上就是<strong>建立白名单</strong>，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。</p><p><strong>通常可以通过两种方式来开启 CSP：</strong></p><ul><li>设置 HTTP Header 中的 Content-Security-Policy</li><li>设置 meta 标签的方式</li></ul><p>这里以设置 HTTP Header 来举例：</p><ul><li>只允许加载本站资源</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Content-Security-Policy: default-src &#39;self&#39;</span></span></code></pre></div><ul><li>只允许加载 HTTPS 协议图片</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Content-Security-Policy: img-src https://*</span></span></code></pre></div><ul><li>允许加载任何来源框架</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Content-Security-Policy: child-src &#39;none&#39;</span></span></code></pre></div><p>如需了解更多属性，请查看<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank" rel="noreferrer">Content-Security-Policy文档</a></p><p>对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。</p><h3 id="_2-转义字符" tabindex="-1">2) 转义字符 <a class="header-anchor" href="#_2-转义字符" aria-label="Permalink to &quot;2) 转义字符&quot;">​</a></h3><p>用户的输入永远不可信任的，最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function escape(str) {</span></span>
<span class="line"><span>  str = str.replace(/&amp;/g, &#39;&amp;amp;&#39;)</span></span>
<span class="line"><span>  str = str.replace(/&lt;/g, &#39;&amp;lt;&#39;)</span></span>
<span class="line"><span>  str = str.replace(/&gt;/g, &#39;&amp;gt;&#39;)</span></span>
<span class="line"><span>  str = str.replace(/&quot;/g, &#39;&amp;quto;&#39;)</span></span>
<span class="line"><span>  str = str.replace(/&#39;/g, &#39;&amp;#39;&#39;)</span></span>
<span class="line"><span>  str = str.replace(/\`/g, &#39;&amp;#96;&#39;)</span></span>
<span class="line"><span>  str = str.replace(/\\//g, &#39;&amp;#x2F;&#39;)</span></span>
<span class="line"><span>  return str</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const xss = require(&#39;xss&#39;)</span></span>
<span class="line"><span>let html = xss(&#39;&lt;h1 id=&quot;title&quot;&gt;XSS Demo&lt;/h1&gt;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;&#39;)</span></span>
<span class="line"><span>// -&gt; &lt;h1&gt;XSS Demo&lt;/h1&gt;&amp;lt;script&amp;gt;alert(&quot;xss&quot;);&amp;lt;/script&amp;gt;</span></span>
<span class="line"><span>console.log(html)</span></span></code></pre></div><p>以上示例使用了 js-xss 来实现，可以看到在输出中保留了 h1 标签且过滤了 script 标签。</p><h3 id="_3-httponly-cookie。" tabindex="-1">3) HttpOnly Cookie。 <a class="header-anchor" href="#_3-httponly-cookie。" aria-label="Permalink to &quot;3) HttpOnly Cookie。&quot;">​</a></h3><p>这是预防XSS攻击窃取用户cookie最有效的防御手段。</p><p>Web应用程序在设置cookie时，将其属性设为<strong>HttpOnly</strong>，就可以避免该网页的cookie被客户端恶意JavaScript窃取，保护用户cookie信息。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617264382743-d84b359d-89ee-4d36-af3e-9132503308d0.png" alt="" loading="lazy"></p><h1 id="二、csrf-跨站请求伪造" tabindex="-1">二、CSRF-跨站请求伪造 <a class="header-anchor" href="#二、csrf-跨站请求伪造" aria-label="Permalink to &quot;二、CSRF-跨站请求伪造&quot;">​</a></h1><p>CSRF(Cross Site Request Forgery)，即<strong>跨站请求伪造</strong>，是一种常见的Web攻击，它利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法请求操作。</p><h2 id="_1-csrf攻击的原理" tabindex="-1">1. CSRF攻击的原理 <a class="header-anchor" href="#_1-csrf攻击的原理" aria-label="Permalink to &quot;1. CSRF攻击的原理&quot;">​</a></h2><p>下面先介绍一下CSRF攻击的原理：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692854-1868bdbe-73d8-41b3-9b03-c54bdaf57284.png" alt="" loading="lazy"></p><p><strong>完成 CSRF 攻击必须要有三个条件：</strong></p><ul><li>用户已经登录了站点 A，并在本地记录了 cookie</li><li>在用户没有登出站点 A 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。</li><li>站点 A 没有做任何 CSRF 防御</li></ul><p><strong>我们来看一个例子：</strong> 当我们登入转账页面后，突然眼前一亮惊现&quot;XXX隐私照片，不看后悔一辈子&quot;的链接，耐不住内心躁动，立马点击了该危险的网站（页面代码如下图所示），但当这页面一加载，便会执行submitForm这个方法来提交转账请求，从而将10块转给黑客。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692637-20fa7ae7-45d2-43c7-8951-06eb17d811bd.png" alt="" loading="lazy"></p><h2 id="_2-如何防御" tabindex="-1">2.如何防御 <a class="header-anchor" href="#_2-如何防御" aria-label="Permalink to &quot;2.如何防御&quot;">​</a></h2><p><strong>防范 CSRF 攻击可以遵循以下几种规则：</strong></p><ul><li>Get 请求不对数据进行修改</li><li>不让第三方网站访问到用户 Cookie</li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 Token</li></ul><h3 id="_1-samesite" tabindex="-1">1) SameSite <a class="header-anchor" href="#_1-samesite" aria-label="Permalink to &quot;1) SameSite&quot;">​</a></h3><p>可以对 <strong>Cookie</strong> 设置 <strong>SameSite</strong> 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617264793719-54ba749c-31c8-4f7b-98ba-b9bcbcd13c03.png" alt="" loading="lazy"></p><h3 id="_2-referer-check" tabindex="-1">2) Referer Check <a class="header-anchor" href="#_2-referer-check" aria-label="Permalink to &quot;2) Referer Check&quot;">​</a></h3><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求时，一般会带上<strong>Referer信息告诉服务器是从哪个页面链接过来的</strong>，服务器借此可以获得一些信息用于处理。可以通过检查请求的来源来防御CSRF攻击。正常请求的referer具有一定规律，如在提交表单的referer必定是在该页面发起的请求。所以通过检查http包头referer的值是不是这个页面，来判断是不是CSRF攻击。</p><p>但在某些情况下如从https跳转到http，浏览器处于安全考虑，不会发送referer，服务器就无法进行check了。若与该网站同域的其他网站有XSS漏洞，那么攻击者可以在其他网站注入恶意脚本，受害者进入了此类同域的网址，也会遭受攻击。出于以上原因，无法完全依赖Referer Check作为防御CSRF的主要手段。但是可以通过Referer Check来监控CSRF攻击的发生。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617265012341-ffbf9c1a-316b-46bd-b33f-301d0809157e.png" alt="" loading="lazy"></p><h3 id="_3-anti-csrf-token" tabindex="-1">3) Anti CSRF Token <a class="header-anchor" href="#_3-anti-csrf-token" aria-label="Permalink to &quot;3) Anti CSRF Token&quot;">​</a></h3><p>目前比较完善的解决方案是加入<strong>Anti-CSRF-Token</strong>。</p><p>token 就是用来区别请求是来自用户本身还是他人伪造的一个好办法。当用户在登录时，服务器生成一个 token 发送给客户端，客户端把这个 token 存在内存中或者本地，每次请求都带上这个 token，服务器接收到这个 token 并验证合法性，合法即继续执行请求，非法即拦截请求，不予执行。</p><p>由于浏览器的同源策略的限制，攻击者的页面无法跨域得到用户页面接收到的 token，所以攻击者的请求肯定是无法给出合法的 token 的（排除 token 被盗的可能，token 被盗不是本文讨论的范畴），由此服务器可以判断请求到底是用户自己发出的，还是以用户的名义被伪造发出的。这种方法相比Referer检查要安全很多。</p><p>关于这个token更多内容可参考：<a href="https://mp.weixin.qq.com/s/iOn0SvVlF1Qj_4Jo9nknDw" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/iOn0SvVlF1Qj_4Jo9nknDw</a></p><h3 id="_4-验证码" tabindex="-1">4) 验证码 <a class="header-anchor" href="#_4-验证码" aria-label="Permalink to &quot;4) 验证码&quot;">​</a></h3><p>应用程序和用户进行交互过程中，特别是账户交易这种核心步骤，强制用户输入验证码，才能完成最终请求。在通常情况下，验证码够很好地遏制CSRF攻击。但增加验证码降低了用户的体验，网站不能给所有的操作都加上验证码。所以只能将验证码作为一种辅助手段，在关键业务点设置验证码。</p><p>常见的图形验证码是与web中的会话相关联的，在一个会话开始时，在需要使用验证码的地方会生成一个与当前会话相关的验证码，用户识别出验证码后通过填写表单将数据提交给服务器，服务器端会验证此次会话中的验证码是否正确。具体来说，其工作流程如图1所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617266678957-e53dc1da-e87b-43dd-afcb-cc3081d2807e.png" alt="" loading="lazy"></p><p>更多验证码内容可参考：<a href="http://blog.nsfocus.net/discussion-web-security-authentication-code/" target="_blank" rel="noreferrer">http://blog.nsfocus.net/discussion-web-security-authentication-code/</a></p><h1 id="三、点击劫持" tabindex="-1">三、点击劫持 <a class="header-anchor" href="#三、点击劫持" aria-label="Permalink to &quot;三、点击劫持&quot;">​</a></h1><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。</p><p>HTML内联框架元素 (<code>&lt;iframe&gt;</code>) 表示嵌套的browsing context。它能够将另一个HTML页面嵌入到当前页面中。</p><p>iframe更多介绍：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe</a></p><h2 id="_1-特点" tabindex="-1">1. 特点 <a class="header-anchor" href="#_1-特点" aria-label="Permalink to &quot;1. 特点&quot;">​</a></h2><ul><li>隐蔽性较高，骗取用户操作</li><li>&quot;UI-覆盖攻击&quot;</li><li>利用iframe或者其它标签的属性</li></ul><h2 id="_2-点击劫持的原理" tabindex="-1">2. 点击劫持的原理 <a class="header-anchor" href="#_2-点击劫持的原理" aria-label="Permalink to &quot;2. 点击劫持的原理&quot;">​</a></h2><p>用户在登陆 A 网站的系统后，被攻击者诱惑打开第三方网站，而第三方网站通过 iframe 引入了 A 网站的页面内容，用户在第三方网站中点击某个按钮（被装饰的按钮），实际上是点击了 A 网站的按钮。</p><p>接下来我们举个例子：我在优酷发布了很多视频，想让更多的人关注它，就可以通过点击劫持来实现</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>iframe {</span></span>
<span class="line"><span>width: 1440px;</span></span>
<span class="line"><span>height: 900px;</span></span>
<span class="line"><span>position: absolute;</span></span>
<span class="line"><span>top: -0px;</span></span>
<span class="line"><span>left: -0px;</span></span>
<span class="line"><span>z-index: 2;</span></span>
<span class="line"><span>-moz-opacity: 0;</span></span>
<span class="line"><span>opacity: 0;</span></span>
<span class="line"><span>filter: alpha(opacity=0);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>button {</span></span>
<span class="line"><span>position: absolute;</span></span>
<span class="line"><span>top: 270px;</span></span>
<span class="line"><span>left: 1150px;</span></span>
<span class="line"><span>z-index: 1;</span></span>
<span class="line"><span>width: 90px;</span></span>
<span class="line"><span>height:40px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/style&gt;</span></span>
<span class="line"><span>......</span></span>
<span class="line"><span>&lt;button&gt;点击xx&lt;/button&gt;</span></span>
<span class="line"><span>&lt;img src=&quot;http://pic1.win4000.com/wallpaper/2018-03-19/5aaf2bf0122d2.jpg&quot;&gt;</span></span>
<span class="line"><span>&lt;iframe src=&quot;http://i.youku.com/u/UMjA0NTg4Njcy&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;</span></span></code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692659-b817d17f-377a-49e8-a37c-cd4e91207a43.png" alt="" loading="lazy"></p><p>从上图可知，<strong>攻击者通过图片作为页面背景，隐藏了用户操作的真实界面</strong>，当你按耐不住好奇点击按钮以后，真正的点击的其实是隐藏的那个页面的订阅按钮，然后就会在你不知情的情况下订阅了。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692843-9178d000-8806-43c1-92b7-55d9e5949e34.png" alt="" loading="lazy"></p><h2 id="_3-如何防御-1" tabindex="-1">3. 如何防御 <a class="header-anchor" href="#_3-如何防御-1" aria-label="Permalink to &quot;3. 如何防御&quot;">​</a></h2><h3 id="_1-x-frame-options" tabindex="-1">1）X-FRAME-OPTIONS <a class="header-anchor" href="#_1-x-frame-options" aria-label="Permalink to &quot;1）X-FRAME-OPTIONS&quot;">​</a></h3><p>X-FRAME-OPTIONS是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。</p><p>该响应头有三个值可选，分别是</p><ul><li>DENY，表示页面不允许通过 iframe 的方式展示</li><li>SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示</li><li>ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示</li></ul><p>X-FRAME-OPTIONS更多内容：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Frame-Options" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Frame-Options</a></p><h3 id="_2-javascript-防御" tabindex="-1">2）JavaScript 防御 <a class="header-anchor" href="#_2-javascript-防御" aria-label="Permalink to &quot;2）JavaScript 防御&quot;">​</a></h3><p>对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>  &lt;style id=&quot;click-jack&quot;&gt;</span></span>
<span class="line"><span>    html {</span></span>
<span class="line"><span>      display: none !important;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  &lt;/style&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>  &lt;script&gt;</span></span>
<span class="line"><span>    if (self == top) {</span></span>
<span class="line"><span>      var style = document.getElementById(&#39;click-jack&#39;)</span></span>
<span class="line"><span>      document.body.removeChild(style)</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>      top.location = self.location</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  &lt;/script&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span></code></pre></div><p>以上代码的作用就是当通过 iframe 的方式加载页面时，攻击者的网页直接不显示所有内容了。</p><h1 id="四、url跳转漏洞" tabindex="-1">四、URL跳转漏洞 <a class="header-anchor" href="#四、url跳转漏洞" aria-label="Permalink to &quot;四、URL跳转漏洞&quot;">​</a></h1><p>定义：借助未验证的URL跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。</p><h2 id="_1-url跳转漏洞原理" tabindex="-1">1.URL跳转漏洞原理 <a class="header-anchor" href="#_1-url跳转漏洞原理" aria-label="Permalink to &quot;1.URL跳转漏洞原理&quot;">​</a></h2><p>黑客利用URL跳转漏洞来诱导安全意识低的用户点击，导致用户信息泄露或者资金的流失。其原理是黑客构建恶意链接(链接需要进行伪装,尽可能迷惑)，发在QQ群或者是浏览量多的贴吧/论坛中。</p><p>安全意识低的用户点击后，经过服务器或者浏览器解析后，跳到恶意的网站中。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692666-f4e48616-fce7-4b56-986e-bac417238707.png" alt="" loading="lazy"></p><p>恶意链接需要进行伪装，经常的做法是熟悉的链接后面加上一个恶意的网址，这样才迷惑用户。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692631-e2798c34-1b85-4862-b743-9b75b0b6edab.png" alt="" loading="lazy"></p><p>诸如伪装成像如下的网址，你是否能够识别出来是恶意网址呢？</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>http://gate.baidu.com/index?act=go&amp;url=http://t.cn/RVTatrd</span></span>
<span class="line"><span>http://qt.qq.com/safecheck.html?flag=1&amp;url=http://t.cn/RVTatrd</span></span>
<span class="line"><span>http://tieba.baidu.com/f/user/passport?jumpUrl=http://t.cn/RVTatrd</span></span></code></pre></div><h2 id="_2-实现方式" tabindex="-1">2.实现方式 <a class="header-anchor" href="#_2-实现方式" aria-label="Permalink to &quot;2.实现方式&quot;">​</a></h2><ul><li>Header头跳转</li><li>Javascript跳转</li><li>META标签跳转</li></ul><p>这里我们举个Header头跳转实现方式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;?php</span></span>
<span class="line"><span>$url=$_GET[&#39;jumpto&#39;];</span></span>
<span class="line"><span>header(&quot;Location: $url&quot;);</span></span>
<span class="line"><span>?&gt;</span></span>
<span class="line"><span>http://www.wooyun.org/login.php?jumpto=http://www.evil.com</span></span></code></pre></div><p>这里用户会认为www.wooyun.org都是可信的，但是点击上述链接将导致用户最终访问www.evil.com这个恶意网址。</p><h2 id="_3-如何防御-2" tabindex="-1">3.如何防御 <a class="header-anchor" href="#_3-如何防御-2" aria-label="Permalink to &quot;3.如何防御&quot;">​</a></h2><h3 id="_1-referer的限制" tabindex="-1">1)referer的限制 <a class="header-anchor" href="#_1-referer的限制" aria-label="Permalink to &quot;1)referer的限制&quot;">​</a></h3><p>如果确定传递URL参数进入的来源，我们可以通过该方式实现安全限制，保证该URL的有效性，避免恶意用户自己生成跳转链接</p><h3 id="_2-加入有效性验证token" tabindex="-1">2)加入有效性验证Token <a class="header-anchor" href="#_2-加入有效性验证token" aria-label="Permalink to &quot;2)加入有效性验证Token&quot;">​</a></h3><p>我们保证所有生成的链接都是来自于我们可信域的，通过在生成的链接里加入用户不可控的Token对生成的链接进行校验，可以避免用户生成自己的恶意链接从而被利用，但是如果功能本身要求比较开放，可能导致有一定的限制。</p><h1 id="五、sql注入" tabindex="-1">五、SQL注入 <a class="header-anchor" href="#五、sql注入" aria-label="Permalink to &quot;五、SQL注入&quot;">​</a></h1><p>SQL注入是一种常见的Web安全漏洞，攻击者利用这个漏洞，可以访问或修改数据，或者利用潜在的数据库漏洞进行攻击。</p><h2 id="_1-sql注入的原理" tabindex="-1">1.SQL注入的原理 <a class="header-anchor" href="#_1-sql注入的原理" aria-label="Permalink to &quot;1.SQL注入的原理&quot;">​</a></h2><p>我们先举一个万能钥匙的例子来说明其原理：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692672-b8e8fbbe-0e68-440c-8956-05bfee151f96.png" alt="" loading="lazy"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;form action=&quot;/login&quot; method=&quot;POST&quot;&gt;</span></span>
<span class="line"><span>    &lt;p&gt;Username: &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;/p&gt;</span></span>
<span class="line"><span>    &lt;p&gt;Password: &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;/p&gt;</span></span>
<span class="line"><span>    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;登陆&quot; /&gt;&lt;/p&gt;</span></span>
<span class="line"><span>&lt;/form&gt;</span></span></code></pre></div><p>后端的 SQL 语句可能是如下这样的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let querySQL = \`</span></span>
<span class="line"><span>    SELECT *</span></span>
<span class="line"><span>    FROM user</span></span>
<span class="line"><span>    WHERE username=&#39;\${username}&#39;</span></span>
<span class="line"><span>    AND psw=&#39;\${password}&#39;</span></span>
<span class="line"><span>\`;</span></span>
<span class="line"><span>// 接下来就是执行 sql 语句...</span></span></code></pre></div><p>这是我们经常见到的登录页面，但如果有一个恶意攻击者输入的用户名username是 admin&#39; --，密码随意输入，就可以直接登入系统了。why! ----这就是SQL注入</p><p>我们之前预想的SQL 语句是:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SELECT * FROM user WHERE username=&#39;admin&#39; AND psw=&#39;password&#39;</span></span></code></pre></div><p>但是恶意攻击者用奇怪用户名将你的 SQL 语句变成了如下形式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SELECT * FROM user WHERE username=&#39;admin&#39; --&#39; AND psw=&#39;xxxx&#39;</span></span></code></pre></div><p>在 SQL 中,&#39; --是闭合和注释的意思，-- 是注释后面的内容的意思，所以查询语句就变成了：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SELECT * FROM user WHERE username=&#39;admin&#39;</span></span></code></pre></div><p>所谓的万能密码,本质上就是SQL注入的一种利用方式。</p><p><strong>一次SQL注入的过程包括以下几个过程：</strong></p><ul><li>获取用户请求参数</li><li>拼接到代码当中</li><li>SQL语句按照我们构造参数的语义执行成功</li></ul><p><strong>SQL注入的必备条件：</strong><br> 1.可以控制输入的数据<br> 2.服务器要执行的代码拼接了控制的数据。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692636-cbdf9d35-323a-4985-b54e-c4b0f17220a2.png" alt="" loading="lazy"></p><p>我们会发现SQL注入流程中与正常请求服务器类似，只是黑客控制了数据，构造了SQL查询，而正常的请求不会SQL查询这一步，SQL注入的本质:数据和代码未分离，即数据当做了代码来执行。</p><h2 id="_2-危害" tabindex="-1">2.危害 <a class="header-anchor" href="#_2-危害" aria-label="Permalink to &quot;2.危害&quot;">​</a></h2><ul><li><p>获取数据库信息</p></li><li><p>管理员后台用户名和密码</p></li><li><p>获取其他数据库敏感信息：用户名、密码、手机号码、身份证、银行卡信息……</p></li><li><p>整个数据库：脱裤</p></li><li><p>获取服务器权限</p></li><li><p>植入Webshell，获取服务器后门</p></li><li><p>读取服务器敏感文件</p></li></ul><h2 id="_3-如何防御-3" tabindex="-1">3.如何防御 <a class="header-anchor" href="#_3-如何防御-3" aria-label="Permalink to &quot;3.如何防御&quot;">​</a></h2><ul><li>严格限制Web应用的数据库的操作权限，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害</li><li>后端代码检查输入的数据是否符合预期，严格限制变量的类型，例如使用正则表达式进行一些匹配处理。</li><li>对进入数据库的特殊字符（&#39;，&quot;，，&lt;，&gt;，&amp;，*，; 等）进行转义处理，或编码转换。基本上所有的后端语言都有对字符串进行转义处理的方法，比如 lodash 的 lodash._escapehtmlchar 库。</li><li>所有的查询语句建议使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如 Node.js 中的 mysqljs 库的 query 方法中的 ? 占位参数。</li></ul><h1 id="六、os命令注入攻击" tabindex="-1">六、OS命令注入攻击 <a class="header-anchor" href="#六、os命令注入攻击" aria-label="Permalink to &quot;六、OS命令注入攻击&quot;">​</a></h1><p>OS命令注入和SQL注入差不多，只不过SQL注入是针对数据库的，而<strong>OS命令注入是针对操作系统的</strong>。OS命令注入攻击指通过Web应用，执行非法的操作系统命令达到攻击的目的。只要在能调用Shell函数的地方就有存在被攻击的风险。倘若调用Shell时存在疏漏，就可以执行插入的非法命令。</p><p>命令注入攻击可以向Shell发送命令，让Windows或Linux操作系统的命令行启动程序。也就是说，通过命令注入攻击可执行操作系统上安装着的各种程序。</p><h2 id="_1-原理" tabindex="-1">1. 原理 <a class="header-anchor" href="#_1-原理" aria-label="Permalink to &quot;1. 原理&quot;">​</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/10385897/1617263692645-54f9fd33-40b0-428c-8e16-b0c506d10c17.png" alt="" loading="lazy"></p><p>黑客构造命令提交给web应用程序，web应用程序提取黑客构造的命令，拼接到被执行的命令中，因黑客注入的命令打破了原有命令结构，导致web应用执行了额外的命令，最后web应用程序将执行的结果输出到响应页面中。</p><p>我们通过一个例子来说明其原理，假如需要实现一个需求：用户提交一些内容到服务器，然后在服务器执行一些系统命令去返回一个结果给用户</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 以 Node.js 为例，假如在接口中需要从 github 下载用户指定的 repo</span></span>
<span class="line"><span>const exec = require(&#39;mz/child_process&#39;).exec;</span></span>
<span class="line"><span>let params = {/* 用户输入的参数 */};</span></span>
<span class="line"><span>exec(\`git clone \${params.repo} /some/path\`);</span></span></code></pre></div><p>如果 params.repo 传入的是 <a href="https://github.com/admin/admin.github.io.git" target="_blank" rel="noreferrer">https://github.com/admin/admin.github.io.git</a> 确实能从指定的 git repo 上下载到想要的代码。</p><p>但是如果 params.repo 传入的是 <a href="https://github.com/xx/xx.git" target="_blank" rel="noreferrer">https://github.com/xx/xx.git</a> &amp;&amp; rm -rf /* &amp;&amp; 恰好你的服务是用 root 权限起的就糟糕了。</p><h2 id="_2-如何防御-1" tabindex="-1">2.如何防御 <a class="header-anchor" href="#_2-如何防御-1" aria-label="Permalink to &quot;2.如何防御&quot;">​</a></h2><ul><li>后端对前端提交内容进行规则限制（比如正则表达式）。</li><li>在调用系统命令前对所有传入参数进行命令行参数转义过滤。</li><li>不要直接拼接命令语句，借助一些工具做拼接、转义预处理，例如 Node.js 的 shell-escape npm包</li></ul><h1 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h1><ul><li><a href="https://zoumiaojiang.com/article/common-web-security/" target="_blank" rel="noreferrer">常见Web 安全攻防总结</a></li><li><a href="https://juejin.im/book/5bdc715fe51d454e755f75ef" target="_blank" rel="noreferrer">前端面试之道</a></li><li><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="noreferrer">图解Http</a></li><li><a href="https://wetest.qq.com/lab/view/136.html" target="_blank" rel="noreferrer">Web安全知多少</a></li><li><a href="https://blog.csdn.net/qq_32523587/article/details/79613768" target="_blank" rel="noreferrer">web安全之点击劫持(clickjacking)</a></li><li><a href="http://drops.xmd5.com/static/drops/papers-58.html" target="_blank" rel="noreferrer">URL重定向/跳转漏洞</a></li><li><a href="https://mooc.study.163.com/smartSpec/detail/1001227001.htm" target="_blank" rel="noreferrer">网易web白帽子</a></li></ul>`,166),l=[t];function i(o,r,c,h,d,u){return e(),s("div",null,l)}const m=a(p,[["render",i]]);export{b as __pageData,m as default};
