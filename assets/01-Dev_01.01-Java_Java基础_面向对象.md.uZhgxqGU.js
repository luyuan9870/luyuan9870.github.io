import{_ as t,c as e,o as a,a4 as o}from"./chunks/framework.BG61BEI0.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"01-Dev/01.01-Java/Java基础/面向对象.md","filePath":"01-Dev/01.01-Java/Java基础/面向对象.md"}'),l={name:"01-Dev/01.01-Java/Java基础/面向对象.md"},_=o("<blockquote><p>设计模式的本质。</p></blockquote><p><strong>三大特性</strong></p><ul><li>封装： function （函数）、继承和多态从抽象的角度上看，也是一种封装。</li><li>继承：代码复用</li><li>多态：类文件的相关性 <strong>四大特性</strong></li></ul><blockquote><p>理解设计模式，就理解为什么抽象也能算上面向对象的特性。 很多的设计模式中都有抽象的影子，例如模板本质上就是给子类去重写抽象方法从而实现逻辑分离。</p></blockquote><ul><li>封装</li><li>继承</li><li>多态</li><li>抽象 ：抽象方法和抽象类，逻辑中包含封装、继承、多态的影子</li></ul>",5),i=[_];function s(c,n,r,p,u,d){return a(),e("div",null,i)}const m=t(l,[["render",s]]);export{f as __pageData,m as default};
