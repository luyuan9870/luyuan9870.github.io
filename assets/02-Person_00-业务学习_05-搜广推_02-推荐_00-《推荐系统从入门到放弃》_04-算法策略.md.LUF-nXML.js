import{_ as a,c as l,o as i,a4 as e}from"./chunks/framework.BG61BEI0.js";const t="/assets/image-20240430094500934.DXNQzCR2.png",o="/assets/image-20240430094737155.BKCs4CBD.png",s="/assets/image-20240430095300458.le94HdcD.png",r="/assets/image-20240430095846672.Cj9NuboS.png",n="/assets/image-20240430100003782.D2eErEtv.png",c="/assets/image-20240430100206130.C_kMBtax.png",p="/assets/image-20240430101011539.Camf9b1P.png",_="/assets/image-20240430093726886.D7f9OZF3.png",x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"02-Person/00-业务学习/05-搜广推/02-推荐/00-《推荐系统从入门到放弃》/04-算法策略.md","filePath":"02-Person/00-业务学习/05-搜广推/02-推荐/00-《推荐系统从入门到放弃》/04-算法策略.md"}'),d={name:"02-Person/00-业务学习/05-搜广推/02-推荐/00-《推荐系统从入门到放弃》/04-算法策略.md"},m=e('<p><img src="'+t+'" alt="" loading="lazy"></p><h2 id="基于内容的推荐系统" tabindex="-1">基于内容的推荐系统 <a class="header-anchor" href="#基于内容的推荐系统" aria-label="Permalink to &quot;基于内容的推荐系统&quot;">​</a></h2><p>定位: 最早被使用的推荐算法，年代久远，但当今仍然被广泛使用，效果良好。 定义： 给用户 X 推荐之前喜欢的物品的相似的物品。即 <code>U2I2I</code>、<code>U2Tag2i</code></p><p>基于物品打标签,</p><ol><li>找物品的特征，标签、分类、关键词 <ol><li>得到结果: <ol><li>钢铁侠: 动作片、科幻片</li><li>蜘蛛侠： 动作片、科幻片</li><li>功夫： 动作片、喜剧、周星驰</li></ol></li></ol></li><li>基于用户的行为的物品列表 <ol><li>计数当前用户的标签。</li><li>使用余弦相似度算法，计算用户标签向量最相似的 TopN 的物品列表。</li><li>返回结果 优缺点：</li></ol></li></ol><ul><li>不需要其他用户的数据，能给具备独特口味的用户推荐，可以推荐最新的、冷门的物品，容易做推荐结果的解释</li><li>很难找到能表达物品的标签。有时候需要人工打标签，过于局限于自己的世界，无法挖掘出用户的潜在兴趣，新用户没有行为则没法做推荐，只能选择冷启动</li></ul><h2 id="基于协同过滤的推荐系统" tabindex="-1">基于协同过滤的推荐系统 <a class="header-anchor" href="#基于协同过滤的推荐系统" aria-label="Permalink to &quot;基于协同过滤的推荐系统&quot;">​</a></h2><p><img src="'+o+'" alt="" loading="lazy"></p><p>基于用户的协同过滤</p><ol><li>找到相似度最高的用户，做物品推荐 基于物品的协同过滤 同现相似度: 基于历史数据计算不同商品之间的相似度. 商品 A 和商品 B 之间的交集, 看个数 人话: 同一个用户, 买了商品 A 和 B 的数量有多少除以人数, 同时购买人数占各自购买的比例</li></ol><h2 id="多路召回的融合策略" tabindex="-1">多路召回的融合策略 <a class="header-anchor" href="#多路召回的融合策略" aria-label="Permalink to &quot;多路召回的融合策略&quot;">​</a></h2><p><img src="'+s+'" alt="" loading="lazy"><img src="'+r+'" alt="" loading="lazy"></p><h2 id="推荐系统的-abtest" tabindex="-1">推荐系统的 ABTest <a class="header-anchor" href="#推荐系统的-abtest" aria-label="Permalink to &quot;推荐系统的 ABTest&quot;">​</a></h2><p><img src="'+n+'" alt="" loading="lazy"><img src="'+c+'" alt="" loading="lazy"></p><h2 id="内容相似推荐" tabindex="-1">内容相似推荐 <a class="header-anchor" href="#内容相似推荐" aria-label="Permalink to &quot;内容相似推荐&quot;">​</a></h2><p><img src="'+p+'" alt="" loading="lazy"></p><h2 id="私货-你可能认识的朋友" tabindex="-1">私货： 你可能认识的朋友 <a class="header-anchor" href="#私货-你可能认识的朋友" aria-label="Permalink to &quot;私货： 你可能认识的朋友&quot;">​</a></h2><blockquote><p>应用场景： 小红书、拼多多、抖音</p></blockquote><p>实现原理</p><ul><li>通讯录授权： 读取通讯录的信息，通过通讯录查找相关账号做推送。</li><li>共同联系人： 你关注了 A、B。 AB 又同时关注了 C，那么这个时候 C 可能你也认识。</li><li>其他属性信息： 附近定位、</li></ul><hr><p>余弦相似度： 用户向量和物品向量的取夹角 <img src="'+_+'" alt="" loading="lazy"></p>',22),h=[m];function g(u,b,f,q,P,k){return i(),l("div",null,h)}const C=a(d,[["render",g]]);export{x as __pageData,C as default};
